### x: Rates
grad(delta,x)
}
Costsold=function(x){
### Rates
deltopt=delta(x);
costs=share(deltopt)*(cdelta*deltopt+cm)
costs
}
Costs=function(x){
### Rates
deltopt=delta(x);
costs=share(deltopt)*(cdelta*(exp(deltopt)-1)+cm)
costs
}
########################################
####### Outcomes over a grid of Reibursement Rates
########################################
T=length(print(seq(0.25, 3.75, by = 0.1)))
Outcomes=matrix(0,nrow=T,ncol=8)
colnames(Outcomes)=c("Rmcaid","delta","Q","deltacomp","Profits","Profits Comp","State Surplus", "Costs")
Outcomes[,1]=print(seq(0.25, 3.75, by = 0.1)*(Rbase))
for (i in 1:T){
Rmcaid=Outcomes[i,1]
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
deltacomp=optim(0,foccomp, method="BFGS",control=list(trace=1,maxit=10000));
Outcomes[i,2]=deltaopt
Outcomes[i,3]=share(deltaopt)
Outcomes[i,4]=deltacomp$par
Outcomes[i,5]=Profits(deltaopt)
Outcomes[i,6]=Profits(deltacomp$par)
Outcomes[i,7]=Vsurplus(deltaopt)
Outcomes[i,8]=Costs(R)
}
Outcomes
############################################
### Bargaining
############################################
#### Optimal Rate without Creative Financing
FFSnoCF=function(x){
### x: Reimbursement Rate
wedge=Inf
#### Only Consider weakly Positive Reimbursement Rates and below UPL
if (x>=0 & x<=UPL){
Rmcaid<<-x
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
if (Vsurplus(deltaopt)>0 & Profits(deltaopt)>0) {
wedge=alpha/Vsurplus(deltaopt)*((MB-mcaid_share*Rmcaid*(1-FMAP))*kappa*(share(deltaopt)*(1-share(deltaopt))*deltaprime(R)*mcaid_share)-share(deltaopt)*mcaid_share*(1-FMAP))+(1-alpha)/Profits(deltaopt)*mcaid_share*share(deltaopt)
wedge=abs(wedge)*10000
} else {
wedge=Inf
}
######
}
wedge
}
#### Optimal Rate with Creative Financing
FFSCF=function(x){
### x: Reimbursement Rate
wedge=Inf
#### Only Consider weakly Positive Reimbursement Rates and below UPL
if (x>=0 & x<=UPL){
Rmcaid<<-x
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
#### no constraints on surplus and profits
wedge=((MB-Rmcaid*mcaid_share*(1-FMAP))*(kappa*share(deltaopt)*(1-share(deltaopt))*deltaprime(R)*mcaid_share)-share(deltaopt)*mcaid_share*(1-FMAP))+share(deltaopt)*mcaid_share
wedge
wedge=abs(wedge)*1000000
}
wedge
}
Wedge_UPL=function(x){
### x: Reimbursement Rate
Rmcaid<<-x
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
#### no constraints on surplus and profits
wedge=((MB-Rmcaid*mcaid_share*(1-FMAP))*(kappa*share(deltaopt)*(1-share(deltaopt))*deltaprime(R)*mcaid_share)-share(deltaopt)*mcaid_share*(1-FMAP))+share(deltaopt)
wedge
}
#############################
### Solve for State Optimal Reimbursement Rate
#############################
Ropt=optim(Rbase,FFSnoCF, method="BFGS",control=list(trace=1,maxit=10000))$par;
print(Ropt)
statesurplus=Vsurplus(delta(Ropt))
snfprofits=Profits(delta(Ropt))
Totsurplus=statesurplus+snfprofits
#### Creative Financing
### Possibly Binding UPL
if (Wedge_UPL(UPL)>0.01) {
RoptCF=UPL
} else {
RoptCF=optim(350,FFSCF, method="BFGS",control=list(trace=1,maxit=10000))$par;
}
print(RoptCF)
FMAP=0
FFSCF(400)
FFSCF(500)
FFSCF(550)
FFSCF(500)
FFSCF(400)
FFSCF(300)
FFSCF(400)
FFSCF(350)
FFSCF(360)
FFSCF(370)
Wedge_UPL(UPL)
optim(350,FFSCF, method="BFGS",control=list(trace=1,maxit=10000))$par;
FMAP
FMAP=0.7
RoptCF=optim(350,FFSCF, method="BFGS",control=list(trace=1,maxit=10000))$par;
######################################################
#### Bargaining Model
######################################################
rm(list = ls())
### Packages
require(numDeriv)
### start with Monopoly Problem
#### Calibrated Parameters
#### Calibrated parameters
#### OLD
cdelta=100
cm=150
cq=100
gamma=0.5
alpha=0.9
xi=-30
MB=200
FMAP=0.7
Rbase=250
UPL=550
kappa=10
########################################
#### NEW
##Medicare average rate in 2008 for low needs RUG https://oig.hhs.gov/oei/reports/oei-02-09-00202.pdf
rate_mcare=283
rate_mcaid_base=146 ### (See state_mcaidrates.dta
### avg medicaid days=185
Rbase=(rate_mcaid_base*185+rate_mcare*100)/(285)
mcaid_share=0.12 ### sahre of patients with Medicaaid stay
Rtot=mcaid_share*rate_mcaid_base+(1-mcaid_share)*rate_mcare
xi=-3
MB=43
FMAP=0.7
UPL=550
kappa=1
gamma=0
alpha=0.5
cq=0
#### calaculate coefficients
base_delta=2 ## mean net delta is 2 (added to -34 as lowest quality SNF)
change_delta=0.05
cdelta=(UPL-Rbase)/change_delta
cm=100
cdelta=200
### Consumer Market share
share=function(x){
### x: mean utility delta
exp(kappa*x+xi)/(1+exp(kappa*x+xi))
}
### FOC for SNFs (with markdown)
focold=function(x) {
### x: mean utility delta
err=x-(1/cdelta*(R-cm-(1+gamma)*cq*(share(x))^gamma)- share(x)/(kappa*share(x)*(1-share(x))));
err^2
}
foc=function(x) {
### x: mean utility delta
err=x-log(1/cdelta*(R-cm+cdelta)*(share(x)*(1-share(x)))/(share(x)+share(x)*(1-share(x))));
err^2
}
### FOC for SNFs (perfect competition) as a fcn of x
foccompold=function(x) {
### x: mean utility delta
err=x-(1/cdelta*(R-cm-(1+gamma)*cq*(share(x))^gamma));
err^2
}
foccomp=function(x) {
### x: mean utility delta
err=x-log(1/cdelta*(R-cm+cdelta));
err^2
}
#### SNF profits as a function of quality (x) and Rates
Profitsold=function(x){
### x: mean utility delta
share(x)*R-share(x)*(cm+cq*(share(x))^gamma+cdelta*x)
}
Profits=function(x){
### x: mean utility delta
share(x)*R-share(x)*(cm+cdelta*(exp(x)-1))
}
#### State surplus as a function of quality (x) and Rates
Vsurplus=function(x){
### x: mean utility delta
MB*share(x)-mcaid_share*(1-FMAP)*Rmcaid*share(x)
}
#### calculate quality as a function of Rates
delta=function(x){
### x: Rates
R<<-x
deltahat=optim(0,foc, method="BFGS",control=list(trace=1,maxit=10000));
deltahat$par
}
#### calculate derivative of quality as a function of Rates
deltaprime=function(x){
### x: Rates
grad(delta,x)
}
Costsold=function(x){
### Rates
deltopt=delta(x);
costs=share(deltopt)*(cdelta*deltopt+cm)
costs
}
Costs=function(x){
### Rates
deltopt=delta(x);
costs=share(deltopt)*(cdelta*(exp(deltopt)-1)+cm)
costs
}
########################################
####### Outcomes over a grid of Reibursement Rates
########################################
T=length(print(seq(0.25, 3.75, by = 0.1)))
Outcomes=matrix(0,nrow=T,ncol=8)
colnames(Outcomes)=c("Rmcaid","delta","Q","deltacomp","Profits","Profits Comp","State Surplus", "Costs")
Outcomes[,1]=print(seq(0.25, 3.75, by = 0.1)*(Rbase))
for (i in 1:T){
Rmcaid=Outcomes[i,1]
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
deltacomp=optim(0,foccomp, method="BFGS",control=list(trace=1,maxit=10000));
Outcomes[i,2]=deltaopt
Outcomes[i,3]=share(deltaopt)
Outcomes[i,4]=deltacomp$par
Outcomes[i,5]=Profits(deltaopt)
Outcomes[i,6]=Profits(deltacomp$par)
Outcomes[i,7]=Vsurplus(deltaopt)
Outcomes[i,8]=Costs(R)
}
Outcomes
delta(RoptCF)
if (Wedge_UPL(UPL)>0.01) {
RoptCF=UPL
} else {
RoptCF=optim(350,FFSCF, method="BFGS",control=list(trace=1,maxit=10000))$par;
}
print(RoptCF)
statesurplusCF=Vsurplus(delta(RoptCF))
snfprofitsCF=Profits(delta(RoptCF))
######################################################
#### Bargaining Model
######################################################
rm(list = ls())
### Packages
require(numDeriv)
### start with Monopoly Problem
#### Calibrated Parameters
#### Calibrated parameters
#### OLD
cdelta=100
cm=150
cq=100
gamma=0.5
alpha=0.9
xi=-30
MB=200
FMAP=0.7
Rbase=250
UPL=550
kappa=10
########################################
#### NEW
##Medicare average rate in 2008 for low needs RUG https://oig.hhs.gov/oei/reports/oei-02-09-00202.pdf
rate_mcare=283
rate_mcaid_base=146 ### (See state_mcaidrates.dta
### avg medicaid days=185
Rbase=(rate_mcaid_base*185+rate_mcare*100)/(285)
mcaid_share=0.12 ### sahre of patients with Medicaaid stay
Rtot=mcaid_share*rate_mcaid_base+(1-mcaid_share)*rate_mcare
xi=-3
MB=43
FMAP=0.7
UPL=550
kappa=1
gamma=0
alpha=0.5
cq=0
#### calaculate coefficients
base_delta=2 ## mean net delta is 2 (added to -34 as lowest quality SNF)
change_delta=0.05
cdelta=(UPL-Rbase)/change_delta
cm=100
cdelta=200
### Consumer Market share
share=function(x){
### x: mean utility delta
exp(kappa*x+xi)/(1+exp(kappa*x+xi))
}
### FOC for SNFs (with markdown)
focold=function(x) {
### x: mean utility delta
err=x-(1/cdelta*(R-cm-(1+gamma)*cq*(share(x))^gamma)- share(x)/(kappa*share(x)*(1-share(x))));
err^2
}
foc=function(x) {
### x: mean utility delta
err=x-log(1/cdelta*(R-cm+cdelta)*(share(x)*(1-share(x)))/(share(x)+share(x)*(1-share(x))));
err^2
}
### FOC for SNFs (perfect competition) as a fcn of x
foccompold=function(x) {
### x: mean utility delta
err=x-(1/cdelta*(R-cm-(1+gamma)*cq*(share(x))^gamma));
err^2
}
foccomp=function(x) {
### x: mean utility delta
err=x-log(1/cdelta*(R-cm+cdelta));
err^2
}
#### SNF profits as a function of quality (x) and Rates
Profitsold=function(x){
### x: mean utility delta
share(x)*R-share(x)*(cm+cq*(share(x))^gamma+cdelta*x)
}
Profits=function(x){
### x: mean utility delta
share(x)*R-share(x)*(cm+cdelta*(exp(x)-1))
}
#### State surplus as a function of quality (x) and Rates
Vsurplus=function(x){
### x: mean utility delta
MB*share(x)-mcaid_share*(1-FMAP)*Rmcaid*share(x)
}
#### calculate quality as a function of Rates
delta=function(x){
### x: Rates
R<<-x
deltahat=optim(0,foc, method="BFGS",control=list(trace=1,maxit=10000));
deltahat$par
}
#### calculate derivative of quality as a function of Rates
deltaprime=function(x){
### x: Rates
grad(delta,x)
}
Costsold=function(x){
### Rates
deltopt=delta(x);
costs=share(deltopt)*(cdelta*deltopt+cm)
costs
}
Costs=function(x){
### Rates
deltopt=delta(x);
costs=share(deltopt)*(cdelta*(exp(deltopt)-1)+cm)
costs
}
########################################
####### Outcomes over a grid of Reibursement Rates
########################################
T=length(print(seq(0.25, 3.75, by = 0.1)))
Outcomes=matrix(0,nrow=T,ncol=8)
colnames(Outcomes)=c("Rmcaid","delta","Q","deltacomp","Profits","Profits Comp","State Surplus", "Costs")
Outcomes[,1]=print(seq(0.25, 3.75, by = 0.1)*(Rbase))
for (i in 1:T){
Rmcaid=Outcomes[i,1]
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
deltacomp=optim(0,foccomp, method="BFGS",control=list(trace=1,maxit=10000));
Outcomes[i,2]=deltaopt
Outcomes[i,3]=share(deltaopt)
Outcomes[i,4]=deltacomp$par
Outcomes[i,5]=Profits(deltaopt)
Outcomes[i,6]=Profits(deltacomp$par)
Outcomes[i,7]=Vsurplus(deltaopt)
Outcomes[i,8]=Costs(R)
}
Outcomes
############################################
### Bargaining
############################################
#### Optimal Rate without Creative Financing
FFSnoCF=function(x){
### x: Reimbursement Rate
wedge=Inf
#### Only Consider weakly Positive Reimbursement Rates and below UPL
if (x>=0 & x<=UPL){
Rmcaid<<-x
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
if (Vsurplus(deltaopt)>0 & Profits(deltaopt)>0) {
wedge=alpha/Vsurplus(deltaopt)*((MB-mcaid_share*Rmcaid*(1-FMAP))*kappa*(share(deltaopt)*(1-share(deltaopt))*deltaprime(R)*mcaid_share)-share(deltaopt)*mcaid_share*(1-FMAP))+(1-alpha)/Profits(deltaopt)*mcaid_share*share(deltaopt)
wedge=abs(wedge)*10000
} else {
wedge=Inf
}
######
}
wedge
}
#### Optimal Rate with Creative Financing
FFSCF=function(x){
### x: Reimbursement Rate
wedge=Inf
#### Only Consider weakly Positive Reimbursement Rates and below UPL
if (x>=0 & x<=UPL){
Rmcaid<<-x
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
#### no constraints on surplus and profits
wedge=((MB-Rmcaid*mcaid_share*(1-FMAP))*(kappa*share(deltaopt)*(1-share(deltaopt))*deltaprime(R)*mcaid_share)-share(deltaopt)*mcaid_share*(1-FMAP))+share(deltaopt)*mcaid_share
wedge
wedge=abs(wedge)*1000000
}
wedge
}
Wedge_UPL=function(x){
### x: Reimbursement Rate
Rmcaid<<-x
R=mcaid_share*Rmcaid+(1-mcaid_share)*rate_mcare
deltaopt=delta(R);
#### no constraints on surplus and profits
wedge=((MB-Rmcaid*mcaid_share*(1-FMAP))*(kappa*share(deltaopt)*(1-share(deltaopt))*deltaprime(R)*mcaid_share)-share(deltaopt)*mcaid_share*(1-FMAP))+share(deltaopt)
wedge
}
#############################
### Solve for State Optimal Reimbursement Rate
#############################
Ropt=optim(Rbase,FFSnoCF, method="BFGS",control=list(trace=1,maxit=10000))$par;
print(Ropt)
statesurplus=Vsurplus(delta(Ropt))
snfprofits=Profits(delta(Ropt))
Totsurplus=statesurplus+snfprofits
#### Creative Financing
### Possibly Binding UPL
if (Wedge_UPL(UPL)>0.01) {
RoptCF=UPL
} else {
RoptCF=optim(350,FFSCF, method="BFGS",control=list(trace=1,maxit=10000))$par;
}
print(RoptCF)
statesurplusCF=Vsurplus(delta(RoptCF))
snfprofitsCF=Profits(delta(RoptCF))
delta(RoptCF)
delta(Ropt)
Ropt
3^14
(1.06-0.88)/(1.06+0.88)
(1.06-0.88)/(1.06+0.88)/(0.7/(0.25+0.95))
####################################################################
##### Load and Clean Goldstar Data
##########################
## Choose Directory
rm(list = ls())
setwd("C:/Users/Martin Hackmann/Documents/GitHub/Teaching/Econ131/Problem Set/PS1")
##################################################################
############################  21/22
### a) San gabriel Valley
data=read.csv("..\raw_data\SGV_300025 - District Usage by Item San Gabe Coop 2021-2022.csv")
####################################################################
##### Load and Clean Goldstar Data
##########################
## Choose Directory
rm(list = ls())
setwd("C:/Users/Martin Hackmann/Documents/GitHub/Teaching/Econ131/Problem Set/PS1")
##################################################################
############################  21/22
### a) San gabriel Valley
data=read.csv("../raw_data/SGV_300025 - District Usage by Item San Gabe Coop 2021-2022.csv")
####################################################################
##### Load and Clean Goldstar Data
##########################
## Choose Directory
rm(list = ls())
setwd("C:/Users/Martin Hackmann/Documents/GitHub/Teaching/Econ131/Problem Set")
##################################################################
############################  21/22
### a) San gabriel Valley
data=read.csv("raw_data/SGV_300025 - District Usage by Item San Gabe Coop 2021-2022.csv")
####################################################################
##### Load and Clean Goldstar Data
##########################
## Choose Directory
rm(list = ls())
setwd("C:/Users/Martin Hackmann/Documents/GitHub/Teaching/Econ131/Problem Set")
##################################################################
############################  21/22
### a) San gabriel Valley
data=read.csv("/raw_data/SGV_300025 - District Usage by Item San Gabe Coop 2021-2022.csv")
getwd
getwd()
####################################################################
##### Load and Clean Goldstar Data
##########################
## Choose Directory
rm(list = ls())
setwd("C:/Users/Martin Hackmann/Documents/GitHub/obesitydata/LA/Goldstar/code")
##################################################################
############################  21/22
### a) San gabriel Valley
data=read.csv("/raw_data/SGV_300025 - District Usage by Item San Gabe Coop 2021-2022.csv")
getwd()
setwd("C:/Users/Martin Hackmann/Documents/GitHub/obesitydata/LA/Goldstar")
data=read.csv("raw_data/SGV_300025 - District Usage by Item San Gabe Coop 2021-2022.csv")
head(data)
View(data)
